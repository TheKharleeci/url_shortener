let validUrl,express,UrlSchema;_662‍.w("valid-url",[["default",["validUrl"],function(v){validUrl=v}]]);_662‍.w("express",[["default",["express"],function(v){express=v}]]);_662‍.w("./schema",[["default",["UrlSchema"],function(v){UrlSchema=v}]]);_662‍.w("dotenv/config");




const app = express();

app.use(express.json());

const dbUrl = process.env.URLSHORTENER_DATABASE_URL


mongoose.connect( dbUrl, { 
    useUnifiedTopology: true, 
    useNewUrlParser: true, 
    useCreateIndex: true, 
    useFindAndModify: false 
})
.then( async () => {
    console.log('Connected to mongodb');
})

const generateUniqueString = () => Math.random().toString(32).substr(2, 5);

const checkIfUrlIsValid = (req, res, next) => {
    const { url } = req.body;
    if (validUrl.isUri(url)) {
      next();
    } else {
      res.send(400);
    }
};

const shortenUrl = async (req, res) => {
    try {
      const id = generateUniqueString();
      const shortUrl = `http://localhost:3000/${id}`;
      const newUrl = new UrlSchema({ original_url: req.body.url, short_url: shortUrl, generated_id: id });
      await newUrl.save();
      return res.status(200).json({
        shortUrl,
      });
    } catch (error) {
      _662‍.g.console.log(error);
      res.status(500);
    }
};

const findUrl = async (req, res) => {
    const { url } = req.params;
    const returnedUrl = await UrlSchema.findOne({short_url:url});
    return returnedUrl
      ? res.redirect(returnedUrl.receivedUrl)
      : res.status(404);
};

app.post("/shorten", checkIfUrlIsValid, shortenUrl);
app.get("/:url", findUrl);

app.listen(3000, () => console.log(`Listening on port ${3000}`));